name: CD

on:
  push:
    branches: [ main ]

jobs:
  deploy-prod:
    name: Deploy to production
    runs-on: ubuntu-latest
    environment:
      name: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    # Deploy image to ECR
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: 7team6-api
        IMAGE_TAG: prod
        GITHUB_SHA: ${{ github.sha }}
        DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
        DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
        DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
        DATABASE_USER: ${{ secrets.DATABASE_USER }}
        REDIS_USER: ${{ secrets.REDIS_USER }}
        JWT: ${{ secrets.JWT }}
      # TODO: 가장 최근에 달린 태그 달아서 배포하기
      run: |
        docker build --env $DATABASE_HOST --env DATABASE_NAME --env DATABASE_PASSWORD --env DATABASE_USER --env REDIS_USER --env JWT -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:prod-$GITHUB_SHA
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:prod-$GITHUB_SHA
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    # Update ECS services
    - name: Update ECS services
      run: |
        aws ecs update-service --force-new-deployment --service team6-api --cluster team6